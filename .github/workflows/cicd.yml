name: CICD
on:
  push:
    branches:
      - main
      - develop

jobs:
  lint:
    name: Lint
    continue-on-error: true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      statuses: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Super-linter
        uses: super-linter/super-linter@v5.7.2
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          npm ci
          npm run build
      - uses: actions/cache/save@v3
        with:
          path: |
            ~/.cache/Cypress
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        browser: [chrome, edge]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/Cypress
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          install: false
          build: npm run build
          start: npm run start
          browser: ${{ matrix.browser }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Cypress video ${{ matrix.browser }}
          path: cypress/videos/

  deploy-production:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' || github.ref_type == 'tag'
    environment:
      name: production
      url: http://51.44.0.177
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/next-image:latest
            ghcr.io/${{ github.repository }}/next-image:${{ github.ref_name }}
          target: next

  deploy-develop:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref_name == 'develop'
    environment:
      name: develop
      url: http://51.44.0.177:3000
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}/next-image:develop
          target: next


  # deploy-docker:
  #   runs-on: ubuntu-latest
  #   needs: [build-docker]
  #   steps:
  #     - uses: webfactory/ssh-agent@v0.8.0
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_KEY }}

  #     - run: |
  #         ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
  #         sudo docker compose -f docker-compose.prod.yml up -d --pull=always"

  # deploy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: webfactory/ssh-agent@v0.8.0
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_KEY }}

  #     - run: |
  #         ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
  #         cd cesi-cicd && \
  #         git pull && \
  #         npm install && \
  #         npm run build && \
  #         pm2 restart npm"
